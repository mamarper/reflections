What happens when you initialize a repository? Why do you need to do it?

You create it with all the files in the directory. You need to do it in order to be able to create commits and track the history of the files included in it.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains the files to be included in the next commit. The working directory contains all the files, but it doesn't contain the directory .git, which allows to keep track of the history of all files included in it. However, the repository does contain that directory, so it allows to keep track of the history and status of the files included in it.

How can you use the staging area to make sure you have one commit per logical change?

You can compare and see the differences between the working directory, the staging area and the last commit using git diff and git diff --staged.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to intoduce some experimental changes or change the language. You can checkout between branches and experiment with thise changes without affecting the master branch.

How do the diagrams help you visualize the branch structure?

You can have a glance of all the different branches and commits included in each of them. You can also detect possible unreachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

You get done in one branch all the commits done for the two branches, so the repository is updated with the changes introduced in both of them. In the diagram this will be represented by a new commit merging the two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
